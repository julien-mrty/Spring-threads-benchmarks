services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10
    # ports: [ "5432:5432" ]
    networks: [ obs ]

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${BACKEND_PROFILE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DB_POOL_SIZE: ${DB_POOL_SIZE}
      SPRING_DB_CONNECTION_TIMEOUT: ${DB_CONNECTION_TIMEOUT}
    # ports: [ "8080:8080" ]
    networks: [ obs ]

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=7d
      - --web.enable-lifecycle
      - --web.enable-remote-write-receiver   # required for k6 remote write
    ports: [ "9090:9090" ] # Do not expose later
    networks: [ obs ]

  grafana:
    image: grafana/grafana:10.4.5
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on: [ prometheus ]
    ports: [ "3000:3000" ] # Do not expose later
    networks: [ obs ]

  k6:
    image: grafana/k6:0.52.0
    container_name: k6
    depends_on: [ backend, prometheus ]
    networks: [ obs ]
    working_dir: /work
    entrypoint: ["tail","-f","/dev/null"]
    volumes:
      - ./scripts/k6:/work:ro        # load scripts
      - k6_runs:/data/runs           # shared results dir

  runner:
    build:
      context: ./runner
      dockerfile: Dockerfile
    container_name: runner
    environment:
      SPRING_PROFILES_ACTIVE: ${RUNNER_PROFILE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock   # talk to Docker
      - k6_runs:/data/runs                          # read summaries to serve
      - ./scripts/k6:/work:ro                       # validate scripts exist
    depends_on: [ k6, backend, prometheus ]
    ports: [ "8081:8081" ] # Do not expose later
    networks: [ obs ]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      # Keep same-origin: UI proxies to runner & grafana
      - VITE_RUNNER_BASE_URL=            # leave empty â†’ use relative /runs
      - VITE_GRAFANA_BASE_URL=/grafana   # iframe goes through nginx proxy
      - VITE_GRAFANA_DASH_UID=yourDashUid
      - VITE_GRAFANA_DASH_SLUG=runner-dashboard
      - VITE_GRAFANA_ORG_ID=1
    ports:
      - "8080:80"  # Supposed to be the only exposed port
    depends_on:
      - runner
      - grafana
    networks: [ obs ]

networks:
  obs:

volumes:
  postgres_data:
  prometheus_data:
  k6_runs: