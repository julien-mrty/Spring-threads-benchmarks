package com.jm.runner.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jm.runner.api.StartRunRequest;
import com.jm.runner.config.RunnerProperties;
import com.jm.runner.model.RunRecord;
import com.jm.runner.model.RunStatus;
import com.jm.runner.service.RunnerService;
import com.jm.runner.configuration.TestRunnerConfiguration;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.context.annotation.Import;

import java.time.Instant;
import java.util.List;
import java.util.Map;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import org.springframework.http.MediaType;

@AutoConfigureMockMvc(addFilters = false) // disable Spring Security filters
@WebMvcTest(controllers = RunsController.class)
@Import(TestRunnerConfiguration.class)
class RunsControllerTest {

    @Autowired MockMvc mvc;
    @MockBean RunnerService service;
    @Autowired ObjectMapper om;

    @Test
    void list_returns_200_with_json() throws Exception {
        var r = new RunRecord();
        r.id = "abc";
        r.script = "ok.js";
        r.status = RunStatus.SUCCEEDED;
        r.start = Instant.now();
        when(service.list()).thenReturn(List.of(r));

        mvc.perform(get("/runs"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value("abc"));
    }

    @Test
    void get_missing_returns_404_problem() throws Exception {
        when(service.get("nope")).thenReturn(null);
        mvc.perform(get("/runs/nope"))
                .andExpect(status().isNotFound());
    }

    @Test
    void post_enqueues_returns_202() throws Exception {
        var req = new StartRunRequest();
        req.script = "ok.js";
        req.params = Map.of("BASE_URL","http://backend:8080");

        var r = new RunRecord();
        r.id = "abc";
        r.script = "ok.js";
        r.status = RunStatus.QUEUED;

        when(service.enqueue(any())).thenReturn(r);

        mvc.perform(post("/runs")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(om.writeValueAsString(req)))
                .andExpect(status().isAccepted())
                .andExpect(jsonPath("$.id").value("abc"));
    }

    @Test
    void post_invalid_returns_400_problem() throws Exception {
        when(service.enqueue(any())).thenThrow(new IllegalArgumentException("script not found"));

        var reqJson = """
      {"script":"missing.js","params":{"BASE_URL":"http://backend:8080"}}
      """;
        mvc.perform(post("/runs")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(reqJson))
                .andExpect(status().isBadRequest());
    }
}
